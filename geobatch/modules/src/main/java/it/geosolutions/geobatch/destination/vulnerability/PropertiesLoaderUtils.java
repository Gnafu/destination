/*
 *  https://github.com/geosolutions-it/fra2015
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author DamianoG
 * 
 */
public class PropertiesLoaderUtils {

    private final static Logger LOGGER = LoggerFactory.getLogger(PropertiesLoaderUtils.class);
    
    public static Map<String, Pair<String[], Double[]>> loadDistances(){
        URL file = PropertiesLoaderUtils.class.getResource("distances.properties");
        Map<String, Pair<String[], Double[]>> map = new HashMap<String, Pair<String[], Double[]>>();
        Configuration distancesProp;
        try {
            distancesProp = new PropertiesConfiguration(new File(file.toURI()));
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return null;
        }
        Iterator iter = distancesProp.getKeys();
        for(int i=1;iter.hasNext();i++){
            String key = (String)iter.next();
            String el = distancesProp.getString(key);
            String[] distances = el.split(";");
            Double[] distancesInt = new Double[distances.length];
            String[] distancesNames = new String[distances.length];
            for(int j=0; j<distancesInt.length; j++){
                distancesInt[j] = Double.parseDouble(distances[j]);
                distancesNames[j] = "distance"+j; 
            }
            Pair<String[], Double[]> pair = new ImmutablePair<String[], Double[]>(distancesNames, distancesInt);
            map.put("distance"+i, pair);
        }
        return map;
    }
}
