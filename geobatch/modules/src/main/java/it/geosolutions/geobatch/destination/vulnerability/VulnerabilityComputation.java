/*
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import it.geosolutions.geobatch.destination.IngestionObject;
import it.geosolutions.geobatch.destination.OutputObject;
import it.geosolutions.geobatch.flow.event.ProgressListenerForwarder;

import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.geotools.data.DataUtilities;
import org.geotools.data.DefaultTransaction;
import org.geotools.data.Transaction;
import org.geotools.factory.Hints;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.jdbc.JDBCDataStore;
import org.jaitools.media.jai.zonalstats.Result;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.type.AttributeDescriptor;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vividsolutions.jts.geom.Geometry;

/**
 * @author DamianoG
 * 
 */
public class VulnerabilityComputation extends IngestionObject {

    private final static Logger LOGGER = LoggerFactory.getLogger(VulnerabilityComputation.class);

    private static Pattern TYPE_NAME_PARTS = Pattern.compile("^([a-z]{4})_([a-z]{3})_([a-z]{2})_([a-z]{4})_([1-3]{1})");
    
    private static String VULNERABILITY_TYPE_NAME = "siig_t_vulnerabilita_X";
    private static String DISTANCE_TYPE_NAME = "siig_d_distanza";
    private static String ID_GEO_ARCO = "id_geo_arco";
    private static Double DISTANCE_NOT_SET_VALUE = 0d;
    /**
     * @param inputTypeName
     * @param listenerForwarder
     */
    public VulnerabilityComputation(String inputTypeName,
            ProgressListenerForwarder listenerForwarder) {
        super(inputTypeName, listenerForwarder);
    }

    @Override
    protected boolean parseTypeName(String typeName) {
        Matcher m = TYPE_NAME_PARTS.matcher(typeName);
        if (m.matches()) {
            return true;
        }
        return false;
    }

    private String getTypeName(String typeName, int aggregationLevel) {
        return typeName.replace("X", aggregationLevel + "");
    }

    /**
     * Compute the vulnerability for each arc. The Algorithm is:
     * 
     * ForEach(arc)
     *    buffers = computeBuffers(allDistance, arc);
     *    ForEach(distance)
     *          ForEach(target)
     *                  if(!isAccepted(distance,target))
     *                      saveOnDB(0,arc,target,distance)
     *                      continue;
     *                  sum = computeSum(buffer, target);
     *                  saveOnDB(sum,arc,target,distance);
     * 
     * 
     * @param datastoreParams
     * @param crs
     * @param aggregationLevel
     * @throws IOException
     */
    public void computeVulnerability(Map<String, Serializable> datastoreParams,
            CoordinateReferenceSystem crs, int aggregationLevel) throws IOException {

        reset();
        if (isValid()) {
            JDBCDataStore dataStore = null;

            crs = checkCrs(crs);

            String outFeatureName = getTypeName(VULNERABILITY_TYPE_NAME, aggregationLevel);

            int process = -1;
            int trace = -1;
            int errors = 0;

            dataStore = connectToDataStore(datastoreParams);
            createInputReader(dataStore, null, null);
            Transaction transaction = new DefaultTransaction();
            OutputObject vulnerabilityObj = new OutputObject(dataStore, transaction,
                    outFeatureName, "");
            OutputObject[] outputObjs = new OutputObject[] { vulnerabilityObj };

            // calculates total objects to import
            int total = getImportCount();
            int startId = ((BigDecimal) getOutputId(vulnerabilityObj)).intValue();
            Map<String, Double[]> distances = TargetUtils.loadDistances();
            List<Double> allDistances = TargetUtils.loadDistances(dataStore, DISTANCE_TYPE_NAME);
            Properties targetURIs = TargetUtils.loadTargetURIs();
            Properties targetMapping = TargetUtils.loadTargetMapping();
            
            try {
                SimpleFeature inputFeature = null;
                int loopCounter = 0;
                while ((inputFeature = readInput()) != null) {
                    DistancesPair allDistancesForComputation =  TargetUtils.createPairDistance(allDistances);
                    Map<Double, Geometry> buffers = VulnerabilityUtils.computeBuffers(inputFeature, allDistancesForComputation);
                    Map<String, Double> statsMap = new HashMap<String, Double>();
                    String idArco = ((BigDecimal)inputFeature.getAttribute(ID_GEO_ARCO)).toString();
                    for(Double el : allDistances){
                        Iterator iter = targetURIs.keySet().iterator();
                        String id = null;
                        while(iter.hasNext()){
                            id = buildFid(idArco, el);
                            String el2 = (String)iter.next();
                            Double[] distance = null;
                            if(el2.startsWith("umani")){
                                distance = distances.get("umani");
                            }
                            else{
                                distance = distances.get(el2);
                            }
                            if(!Arrays.asList(distance).contains(el)){
                                continue;
                            }
                            String imgAbsolutePath = targetURIs.getProperty(el2);
                            RenderedImage image = VulnerabilityUtils.loadImage(true, new File(imgAbsolutePath));
                            Geometry roiGeom = VulnerabilityUtils.toRasterSpace(imgAbsolutePath, buffers.get(el));
                            Double noData = VulnerabilityUtils.getNoDataValue(imgAbsolutePath);
                            RenderedImage croppedImage = VulnerabilityUtils.cropImage(image, roiGeom);
                            Result res = VulnerabilityUtils.sumCellsInsideBuffer(roiGeom, croppedImage, noData, 0);
                            Double resSimple = res.getValue();
                            statsMap.put(targetMapping.getProperty(el2), (resSimple.equals(Double.NaN)?0d:resSimple));
                        }
                        if(!statsMap.isEmpty()){
                            errors = writeOutputObjects(trace, dataStore, outputObjs, total, errors, outFeatureName, inputFeature, id, statsMap);
                            statsMap.clear();
                        }
                        
                    }
                    loopCounter++;
                    int id = nextId(startId);
                    if(loopCounter % 100 == 0){
                        LOGGER.info("computed arcs FROM -" + (loopCounter-100) + "- TO -" + loopCounter + "-");
                    }
                    if(LOGGER.isDebugEnabled()){
                        LOGGER.debug("Computing arc ", id);
                    }
                }
                importFinished(total, "Data imported in " + outFeatureName);

            } catch(Exception e){
                LOGGER.error(e.getMessage(), e);
            }
            finally {
                closeInputReader();
            }
        }
    }

    private int writeOutputObjects(int trace, JDBCDataStore dataStore,
            OutputObject[] outputObjects, int total, int errors, String outputName,
            SimpleFeature inputFeature, String id, Map<String, Double> map) throws IOException {
        Transaction rowTransaction = new DefaultTransaction();
        setTransaction(outputObjects, rowTransaction);

        try {
            addVulnerabilityFeature(outputObjects[0], id, map);
            rowTransaction.commit();

            updateImportProgress(total, "Importing data in " + outputName);
        } catch (Exception e) {
            errors++;
            rollbackId();
            rowTransaction.rollback();
        } finally {
            rowTransaction.close();
        }
        return errors;
    }

    private void addVulnerabilityFeature(OutputObject vulnerabilityObject, String id, Map<String, Double> map)
            throws IOException {

        SimpleFeatureBuilder featureBuilder = vulnerabilityObject.getBuilder();
        String[] p_key = id.split("\\.");
        for (AttributeDescriptor attr : vulnerabilityObject.getSchema().getAttributeDescriptors()) {
            if (attr.getLocalName().equals("id_geo_arco")) {
                featureBuilder.add(p_key[0]);
            } else if (attr.getLocalName().equals("id_distanza")) {
                featureBuilder.add(p_key[1]);
            } else { 
                Double value = map.get(attr.getLocalName());
                featureBuilder.add((value == null)?DISTANCE_NOT_SET_VALUE:value);
            }
        }
        SimpleFeature feature = featureBuilder.buildFeature(id);
        feature.getUserData().put(Hints.USE_PROVIDED_FID, true);
        vulnerabilityObject.getWriter().addFeatures(DataUtilities.collection(feature));
    }
    
    private static String buildFid(String idArco, Double el){
        return idArco + "." +el.intValue();
    }
}
