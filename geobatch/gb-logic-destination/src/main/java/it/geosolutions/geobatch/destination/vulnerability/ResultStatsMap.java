/*
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import static it.geosolutions.geobatch.destination.vulnerability.TargetPropertiesLoader.COP_SUOLO_PREFIX;
import static it.geosolutions.geobatch.destination.vulnerability.TargetPropertiesLoader.PROP_NAMESPACE_SEPARATOR;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.apache.commons.collections.MapUtils;

/**
 * @author DamianoG
 *
 */
public class ResultStatsMap {

    private Map<String, Double> statsMap;
    private Map<Integer, String> valuesZone;
    private Properties targetMapping;
    
    public ResultStatsMap(Properties targetMapping, Map<Integer, String> valuesZone){
        this.statsMap = new HashMap<String, Double>();
        this.targetMapping = targetMapping;
        this.valuesZone = valuesZone;
    }
    
    public void addResult(String targetID, Double value, boolean forceToZero){
        if(forceToZero){
            statsMap.put(targetMapping.getProperty(targetID), 0d);
        }
        else{
            statsMap.put(targetMapping.getProperty(targetID), value);
        }
    }
    
    public void addResultFromPixelValue(Integer pixelValue, Double value, boolean forceToZero){
        addResult(fromPixelValueToTargetId(pixelValue), value, forceToZero);
    }
    
    public void clear(){
        statsMap.clear();
    }
    
    public boolean isEmpty(){
        return statsMap.isEmpty();
    }
    
    public Map getStatsMap(){
        return MapUtils.unmodifiableMap(statsMap);
    }
    
    private String fromPixelValueToTargetId(Integer pixelValue){
        return COP_SUOLO_PREFIX+PROP_NAMESPACE_SEPARATOR+valuesZone.get(pixelValue.intValue());
    }
}
