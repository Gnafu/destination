///*
// *  fra2015
// *  https://github.com/geosolutions-it/fra2015
// *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
// *  http://www.geo-solutions.it
// *
// *  GPLv3 + Classpath exception
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// */
//package it.geosolutions.geobatch.destination.vulnerability;
//
//import it.geosolutions.geobatch.destination.OutputObject;
//
//import java.io.IOException;
//import java.util.Map;
//
//import org.geotools.data.DataUtilities;
//import org.geotools.data.DefaultTransaction;
//import org.geotools.data.Transaction;
//import org.geotools.factory.Hints;
//import org.geotools.feature.simple.SimpleFeatureBuilder;
//import org.geotools.jdbc.JDBCDataStore;
//import org.opengis.feature.simple.SimpleFeature;
//import org.opengis.feature.type.AttributeDescriptor;
//
///**
// * @author DamianoG
// *
// */
//public class VulnerabilityResultsWriter {
//
//    private int writeOutputObjects(int trace, JDBCDataStore dataStore,
//            OutputObject[] outputObjects, int total, int errors, String outputName,
//            SimpleFeature inputFeature, String id, Map<String, Double> map, int partner_id) throws IOException {
//        Transaction rowTransaction = new DefaultTransaction();
//        setTransaction(outputObjects, rowTransaction);
//
//        try {
//            addVulnerabilityFeature(outputObjects[0], id, map, partner_id);
//            rowTransaction.commit();
//
//            updateImportProgress(total, "Importing data in " + outputName);
//        } catch (Exception e) {
//            errors++;
//            rollbackId();
//            rowTransaction.rollback();
//        } finally {
//            rowTransaction.close();
//        }
//        return errors;
//    }
//
//    private void addVulnerabilityFeature(OutputObject vulnerabilityObject, String id, Map<String, Double> map, int partner_id)
//            throws IOException {
//        
////        Iterator iter = map.keySet().iterator();
////        while(iter.hasNext()){
////            LOGGER.info((String)iter.next());
////        }
//        SimpleFeatureBuilder featureBuilder = vulnerabilityObject.getBuilder();
//        String[] p_key = id.split("\\.");
//        for (AttributeDescriptor attr : vulnerabilityObject.getSchema().getAttributeDescriptors()) {
//            if (attr.getLocalName().equals("id_geo_arco")) {
//                featureBuilder.add(p_key[0]);
//            } else if (attr.getLocalName().equals("id_distanza")) {
//                featureBuilder.add(p_key[1]);
//            } else if (attr.getLocalName().equals(PARTNER_FIELD)) {
//                featureBuilder.add(partner_id+"");
//            } else { 
//                Double value = map.get(attr.getLocalName());
//                featureBuilder.add((value == null)?DISTANCE_NOT_SET_VALUE:value);
//            }
//        }
//        SimpleFeature feature = featureBuilder.buildFeature(id);
//        feature.getUserData().put(Hints.USE_PROVIDED_FID, true);
//        vulnerabilityObject.getWriter().addFeatures(DataUtilities.collection(feature));
//    }
//    
//}
