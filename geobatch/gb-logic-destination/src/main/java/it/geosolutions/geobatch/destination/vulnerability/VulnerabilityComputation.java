/*
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import it.geosolutions.geobatch.destination.IngestionObject;
import it.geosolutions.geobatch.destination.OutputObject;
import it.geosolutions.geobatch.flow.event.ProgressListenerForwarder;

import java.awt.image.RenderedImage;
import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.geotools.data.DefaultTransaction;
import org.geotools.data.Transaction;
import org.geotools.gce.geotiff.GeoTiffReader;
import org.geotools.jdbc.JDBCDataStore;
import org.jaitools.media.jai.zonalstats.Result;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.filter.Filter;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vividsolutions.jts.geom.Geometry;
/**
 * @author DamianoG
 * 
 */
public class VulnerabilityComputation extends IngestionObject {

    private final static Logger LOGGER = LoggerFactory.getLogger(VulnerabilityComputation.class);

    private static Pattern TYPE_NAME_PARTS = Pattern.compile("^([a-z]{4})_([a-z]{3})_([a-z]{2})_([a-z]{4})_([1-3]{1})");
    
    private static String VULNERABILITY_TYPE_NAME = "siig_t_vulnerabilita_X";
    private static String DISTANCE_TYPE_NAME = "siig_d_distanza";
    private static String ID_GEO_ARCO = "id_geo_arco";
    public static String PARTNER_FIELD = "fk_partner";
    public static String GEOID = "id_geo_arco";
    
    private Long startOriginId; 
    private Long endOriginId;
    
    private int pixelArea;
    
    /**
     * @param startOriginId the startOriginId to set
     */
    public void setStartOriginId(Long startOriginId) {
        this.startOriginId = startOriginId;
    }

    /**
     * @param endOriginId the endOriginId to set
     */
    public void setEndOriginId(Long endOriginId) {
        this.endOriginId = endOriginId;
    }

    /**
     * @return the pixelArea
     */
    public int setPixelArea() {
        return pixelArea;
    }

    /**
     * @param pixelArea the pixelArea to set
     */
    public void setPixelArea(int pixelArea) {
        this.pixelArea = pixelArea;
    }

    /**
     * @param inputTypeName
     * @param listenerForwarder
     */
    public VulnerabilityComputation(String inputTypeName,
            ProgressListenerForwarder listenerForwarder) {
        super(inputTypeName, listenerForwarder);
        // default area
        pixelArea = 100;
    }

    @Override
    protected boolean parseTypeName(String typeName) {
        Matcher m = TYPE_NAME_PARTS.matcher(typeName);
        if (m.matches()) {
            return true;
        }
        return false;
    }

    private String getTypeName(String typeName, int aggregationLevel) {
        return typeName.replace("X", aggregationLevel + "");
    }

    /**
     * Compute the vulnerability for each arc. The Algorithm is:
     * 
     * ForEach(arc)
     *    buffers = computeBuffers(allDistance, arc);
     *    ForEach(distance)
     *          ForEach(target)
     *                  if(!isAccepted(distance,target))
     *                      saveOnDB(0,arc,target,distance)
     *                      continue;
     *                  sum = computeSum(buffer, target);
     *                  saveOnDB(sum,arc,target,distance);
     * 
     * 
     * @param datastoreParams
     * @param crs
     * @param aggregationLevel
     * @throws IOException
     */
    public void computeVulnerability(Map<String, Serializable> datastoreParams,
            CoordinateReferenceSystem crs, int aggregationLevel, int id_partner, String writeMode) throws IOException {

        reset();
        if (isValid()) {
            JDBCDataStore dataStore = null;

            crs = checkCrs(crs);

            String outFeatureName = getTypeName(VULNERABILITY_TYPE_NAME, aggregationLevel);

            int trace = -1;
            int errors = 0;
            long otherErrors = 0;

            dataStore = connectToDataStore(datastoreParams);
            createInputReader(dataStore, null, null);
            
            // calculates total objects to import
            int total = getImportCount();
            
            //
            // Load All needed resources: properties files, Rendered Images, GeotifReaders 
            //
            List<Double> allDistances = TargetPropertiesLoader.loadDistances(dataStore, DISTANCE_TYPE_NAME);
            TargetPropertiesLoader propertiesLoader = new TargetPropertiesLoader(); 
            
            Properties targetURIs = propertiesLoader.getTargetURIs();
            Map<String,RenderedImage> targetRasters = VulnerabilityUtils.loadImages(targetURIs);
            Map<String,GeoTiffReader> targetReaders = VulnerabilityUtils.loadGTIFFReaders(targetURIs);
            
            Properties targetMapping = propertiesLoader.getTargetMapping();
            Map<Integer, String> valuesZone = propertiesLoader.getTargetValuesZone();
            ResultStatsMap statsMap = new ResultStatsMap(targetMapping, valuesZone);
            Properties zoneValues = propertiesLoader.getTargetZoneValues();
            
            logVulnerabilityConfiguration(targetRasters, allDistances, targetMapping, zoneValues);
            
            //Setup the OutputObject (in thet case the vulnerability table) remove old values for the partner and detect the max id
            Transaction transaction = new DefaultTransaction();
            OutputObject vulnerabilityObj = new OutputObject(dataStore, transaction,
                    outFeatureName, GEOID);
            
            //
            // Load the writer for persist the results and init the feature
            //
            VulnerabilityResultsWriter writer = VulnerabilityResultsWriter.instantiateWriterFromString(writeMode);
            LOGGER.info("Using writer " + VulnerabilityResultsWriter.class);
            writer.initFeature(vulnerabilityObj, id_partner);
            
            //
            // Start the vulnerability Computation
            //
            try {
                SimpleFeature inputFeature = null;
                int loopCounter = 0;
                setInputFilter(buildOriginFilter(id_partner));
                LOGGER.info("Start computation: ThreadName: " + Thread.currentThread().getName() + " - startOriginId: " + startOriginId + " - endOriginId: " + endOriginId);
                while ((inputFeature = readInput()) != null) {
                    try{
                        DistancesPair allDistancesForComputation =  TargetPropertiesLoader.createPairDistance(allDistances);
                        Map<Double, Geometry> buffers = VulnerabilityUtils.computeBuffers(inputFeature, allDistancesForComputation);                        
                        String idArco = ((BigDecimal)inputFeature.getAttribute(ID_GEO_ARCO)).toString();
                        for(Double processedDistance : allDistances){
                            String id = null;
                            Iterator rasterIter = targetRasters.keySet().iterator();
                            while(rasterIter.hasNext()){
                                
                                // retrieve the fid for this record
                                id = buildFid(idArco, processedDistance);
                                
                                // save the ID of this target
                                String targetID = (String)rasterIter.next();
                                
                                // Load the target manager, init its status and check if the actual distance is a valid distance for it  
                                TargetManager targetManager = TargetManager.getInstace(targetID, pixelArea);
                                targetManager.initTarget();
                                if(!targetManager.isDistanceRelatedToTarget(processedDistance)){
                                    continue;
                                }
                                
                                // Retrieve the buffer of the arc in the raster space and crop the raster of the target in the raster of the buffer BBOX to run the stats on a smaller raster
                                RenderedImage image = targetRasters.get(targetID);
                                Geometry roiGeom = VulnerabilityUtils.toRasterSpace(buffers.get(processedDistance), targetReaders.get(targetID));
                                Double noData = VulnerabilityUtils.getNoDataValue(targetReaders.get(targetID));
                                RenderedImage croppedImage = VulnerabilityUtils.cropImage(image, roiGeom);
                                
                                // Check if the crop operation was succesful
                                boolean forceToZero = false;
                                if(croppedImage == null){
                                    if(LOGGER.isDebugEnabled()){
                                        LOGGER.debug("arc: " + inputFeature.getID() + " - target: " + targetID + " set to 0 (bboxes doesn't intersect between them)");
                                    }
                                    forceToZero = true;
                                    continue;
                                }
                                
                                // Compute the stats on the target 
                                List<Result> results = VulnerabilityUtils.sumCellsInsideBuffer(roiGeom, croppedImage, noData, 0, targetManager.getPixelValues());
    
                                // Write the results into the stats map
                                targetManager.handleResults(results, statsMap, forceToZero);
                            }
                            if(!statsMap.isEmpty()){
                                errors = writer.writeOutputObjects(trace, dataStore, vulnerabilityObj, total, errors, outFeatureName, inputFeature, id, statsMap.getStatsMap(), id_partner);
                                statsMap.clear();
                            }
                        }
                    }
                    catch(Exception e){
                        otherErrors++;
                        LOGGER.error(e.getMessage(), e);
                    }
                    
                }
                loopCounter++;
                //int id = nextId(startId);
                if(loopCounter % 100 == 0){
                    LOGGER.info("computed arcs FROM -" + (loopCounter-100) + "- TO -" + loopCounter + "-");
                }
                if(LOGGER.isDebugEnabled() && inputFeature != null){
                    LOGGER.debug("Computing arc " + inputFeature.getID());
                }
                importFinished(total, "Data imported in " + outFeatureName);

            } 
            finally {
                VulnerabilityUtils.disposeGTIFFReaders(targetReaders);
                closeInputReader();
                LOGGER.info("Write errors: " + errors + " - other errors: " + otherErrors);
            }
        }
    }

    private void logVulnerabilityConfiguration(Map<String,RenderedImage> targetRasters, List<Double> allDistances, Properties targetMapping, Properties zoneValues){
        Iterator rasterIter = targetRasters.keySet().iterator();
        StringBuilder sb = new StringBuilder();
        sb.append("rasterLoaded:[ ");
        while(rasterIter.hasNext()){
            sb.append((String)rasterIter.next()).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
        
        sb = new StringBuilder();
        sb.append("distanceLoaded:[ ");
        for(Double el : allDistances){
            sb.append(el).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
        
        sb = new StringBuilder();
        sb.append("tableVulnerabilityMapping:[ ");
        Iterator targetMappingIter = targetMapping.keySet().iterator();
        while(targetMappingIter.hasNext()){
            String key = (String)targetMappingIter.next();
            sb.append(key).append("-").append(targetMapping.getProperty(key)).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
        
        sb = new StringBuilder();
        sb.append("zoneValuesCopSuolo:[ ");
        Iterator zoneValuesIter = zoneValues.keySet().iterator();
        while(zoneValuesIter.hasNext()){
            String key = (String)zoneValuesIter.next();
            sb.append(key).append("-").append(zoneValues.getProperty(key)).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
    }
    
    private static String buildFid(String idArco, Double el){
        return idArco + "." +el.intValue();
    }
    
    private Filter buildOriginFilter(int idPartner) {
        if (this.startOriginId != null && this.endOriginId != null) {
            return filterFactory.and(
                    filterFactory.equals(filterFactory.property(PARTNER_FIELD),
                            filterFactory.literal(idPartner)),
                    filterFactory.between(filterFactory.property(GEOID),
                            filterFactory.literal(this.startOriginId),
                            filterFactory.literal(this.endOriginId)));
        }
        return filterFactory.equals(filterFactory.property(PARTNER_FIELD),
                filterFactory.literal(idPartner));
    }
}
