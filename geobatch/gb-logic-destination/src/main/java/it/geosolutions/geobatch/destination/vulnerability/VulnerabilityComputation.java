/*
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import static it.geosolutions.geobatch.destination.vulnerability.TargetPropertiesLoader.COP_SUOLO_PREFIX;
import static it.geosolutions.geobatch.destination.vulnerability.TargetPropertiesLoader.PROP_NAMESPACE_SEPARATOR;
import static it.geosolutions.geobatch.destination.vulnerability.TargetPropertiesLoader.UMANI_PREFIX;
import it.geosolutions.geobatch.destination.IngestionObject;
import it.geosolutions.geobatch.destination.OutputObject;
import it.geosolutions.geobatch.flow.event.ProgressListenerForwarder;

import java.awt.image.RenderedImage;
import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.geotools.data.DataUtilities;
import org.geotools.data.DefaultTransaction;
import org.geotools.data.Transaction;
import org.geotools.factory.Hints;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.gce.geotiff.GeoTiffReader;
import org.geotools.jdbc.JDBCDataStore;
import org.jaitools.media.jai.zonalstats.Result;
import org.jaitools.numeric.Range;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.type.AttributeDescriptor;
import org.opengis.filter.Filter;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vividsolutions.jts.geom.Geometry;
/**
 * @author DamianoG
 * 
 */
public class VulnerabilityComputation extends IngestionObject {

    private final static Logger LOGGER = LoggerFactory.getLogger(VulnerabilityComputation.class);

    private static Pattern TYPE_NAME_PARTS = Pattern.compile("^([a-z]{4})_([a-z]{3})_([a-z]{2})_([a-z]{4})_([1-3]{1})");
    
    private static String VULNERABILITY_TYPE_NAME = "siig_t_vulnerabilita_X";
    private static String DISTANCE_TYPE_NAME = "siig_d_distanza";
    private static String ID_GEO_ARCO = "id_geo_arco";
    private static String PARTNER_FIELD = "fk_partner";
    private static String GEOID = "id_geo_arco";
    
    private static Double DISTANCE_NOT_SET_VALUE = 0d;
    
    private Long startOriginId; 
    private Long endOriginId;
    
    /**
     * @param startOriginId the startOriginId to set
     */
    public void setStartOriginId(Long startOriginId) {
        this.startOriginId = startOriginId;
    }

    /**
     * @param endOriginId the endOriginId to set
     */
    public void setEndOriginId(Long endOriginId) {
        this.endOriginId = endOriginId;
    }

    /**
     * @param inputTypeName
     * @param listenerForwarder
     */
    public VulnerabilityComputation(String inputTypeName,
            ProgressListenerForwarder listenerForwarder) {
        super(inputTypeName, listenerForwarder);
    }

    @Override
    protected boolean parseTypeName(String typeName) {
        Matcher m = TYPE_NAME_PARTS.matcher(typeName);
        if (m.matches()) {
            return true;
        }
        return false;
    }

    private String getTypeName(String typeName, int aggregationLevel) {
        return typeName.replace("X", aggregationLevel + "");
    }

    /**
     * Compute the vulnerability for each arc. The Algorithm is:
     * 
     * ForEach(arc)
     *    buffers = computeBuffers(allDistance, arc);
     *    ForEach(distance)
     *          ForEach(target)
     *                  if(!isAccepted(distance,target))
     *                      saveOnDB(0,arc,target,distance)
     *                      continue;
     *                  sum = computeSum(buffer, target);
     *                  saveOnDB(sum,arc,target,distance);
     * 
     * 
     * @param datastoreParams
     * @param crs
     * @param aggregationLevel
     * @throws IOException
     */
    public void computeVulnerability(Map<String, Serializable> datastoreParams,
            CoordinateReferenceSystem crs, int aggregationLevel, int id_partner) throws IOException {

        reset();
        if (isValid()) {
            JDBCDataStore dataStore = null;

            crs = checkCrs(crs);

            String outFeatureName = getTypeName(VULNERABILITY_TYPE_NAME, aggregationLevel);

            int process = -1;
            int trace = -1;
            int errors = 0;

            dataStore = connectToDataStore(datastoreParams);
            createInputReader(dataStore, null, null);
            
            // calculates total objects to import
            int total = getImportCount();
            
            //
            // Load All needed resources: properties files, Rendered Images, GeotifReaders 
            //
            Map<String, Double[]> distances = TargetPropertiesLoader.loadDistances();
            List<Double> allDistances = TargetPropertiesLoader.loadDistances(dataStore, DISTANCE_TYPE_NAME);
            TargetPropertiesLoader propertiesLoader = new TargetPropertiesLoader(); 
            
            Properties targetURIs = propertiesLoader.getTargetURIs();
            Map<String,RenderedImage> targetRasters = VulnerabilityUtils.loadImages(targetURIs);
            Iterator rasterIter = targetRasters.keySet().iterator();
            Map<String,GeoTiffReader> targetReaders = VulnerabilityUtils.loadGTIFFReaders(targetURIs);
            
            Properties targetMapping = propertiesLoader.getTargetMapping();
            Properties zoneValues = propertiesLoader.getTargetZoneValues();
            Map<Integer, String> valuesZone = propertiesLoader.getTargetValuesZone();
            List<Integer> copSuoloValues = propertiesLoader.getAllCopSuoloValues();
            
            logVulnerabilityConfiguration(rasterIter, allDistances, targetMapping, zoneValues);
            
            //Setup the OutputObject (in thet case the vulnerability table) remove old values for the partner and detect the max id
            Transaction transaction = new DefaultTransaction();
            OutputObject vulnerabilityObj = new OutputObject(dataStore, transaction,
                    outFeatureName, GEOID);
            OutputObject[] outputObjs = new OutputObject[] { vulnerabilityObj };
            int startId;
            try {
                    // remove previous data for the given partner
                    Filter removeFilter = filterFactory.equals(
                            filterFactory.property(PARTNER_FIELD), filterFactory.literal(id_partner)
                    );
                    removeObjects(outputObjs, removeFilter);       
                    startId = ((BigDecimal) getOutputId(vulnerabilityObj)).intValue();
                    transaction.commit();   
            } catch (IOException e) {
                    LOGGER.error("Error while trying to delete vulnerability objects for partner " + id_partner, e);
                    transaction.rollback();
                    throw e;
            } finally {
                    transaction.close();
            }
            
            //
            // Start the vulnerability Computation
            //
            try {
                SimpleFeature inputFeature = null;
                int loopCounter = 0;
                setInputFilter(buildOriginFilter(id_partner));
                LOGGER.info("Start computation: ThreadName: " + Thread.currentThread().getName() + " - startOriginId: " + startOriginId + " - endOriginId: " + endOriginId);
                while ((inputFeature = readInput()) != null) {
                    DistancesPair allDistancesForComputation =  TargetPropertiesLoader.createPairDistance(allDistances);
                    Map<Double, Geometry> buffers = VulnerabilityUtils.computeBuffers(inputFeature, allDistancesForComputation);
                    Map<String, Double> statsMap = new HashMap<String, Double>();
                    String idArco = ((BigDecimal)inputFeature.getAttribute(ID_GEO_ARCO)).toString();
                    for(Double el : allDistances){
                        String id = null;
                        while(rasterIter.hasNext()){
                            id = buildFid(idArco, el);
                            String el2 = (String)rasterIter.next();
                            Double[] distance = null;
                            List<Integer> values = null;
                            Boolean isMultiResults = null;
                            if(el2.startsWith(TargetPropertiesLoader.UMANI_PREFIX)){
                                distance = distances.get(UMANI_PREFIX);
                            }
                            else{
                                distance = distances.get(el2);
                                isMultiResults = false;
                                if(el2.startsWith(TargetPropertiesLoader.COP_SUOLO_PREFIX)){
                                    isMultiResults = true;
                                    values = copSuoloValues;
                                }
                            }
                            if(!Arrays.asList(distance).contains(el)){
                                continue;
                            }
                            String imgAbsolutePath = targetURIs.getProperty(el2);
                            RenderedImage image = targetRasters.get(el2);
                            Geometry roiGeom = VulnerabilityUtils.toRasterSpace(buffers.get(el), targetReaders.get(el2));
                            Double noData = VulnerabilityUtils.getNoDataValue(targetReaders.get(el2));
                            RenderedImage croppedImage = VulnerabilityUtils.cropImage(image, roiGeom);
                            List<Result> results = VulnerabilityUtils.sumCellsInsideBuffer(roiGeom, croppedImage, noData, 0, values);

                            for(Result el3 : results){
                                Double resSimple = (el3.getValue().equals(Double.NaN)?0d:el3.getValue());
                                Long countSimple = el3.getNumOffered();
                                if(isMultiResults == null){
                                    statsMap.put(targetMapping.getProperty(el2), resSimple);                                
                                }
                                else if(!isMultiResults){
                                    
                                    statsMap.put(targetMapping.getProperty(el2), Double.valueOf(countSimple));                                
                                }
                                else{
                                    Iterator rangeIter = el3.getRanges().iterator();
                                    while(rangeIter.hasNext()){
                                        Range range = (Range)rangeIter.next();
                                        Number value = range.getMax();
                                        String key=COP_SUOLO_PREFIX+PROP_NAMESPACE_SEPARATOR+valuesZone.get(value.intValue());
                                        if(resSimple != 0 && resSimple != Double.NaN){
                                            statsMap.put(targetMapping.getProperty(key), Double.valueOf(resSimple/value.doubleValue()));
                                        }
                                        else{
                                            statsMap.put(targetMapping.getProperty(key), 0d);
                                        }
                                    }
                                }
                            }    
                        }
                        if(!statsMap.isEmpty()){
                            errors = writeOutputObjects(trace, dataStore, outputObjs, total, errors, outFeatureName, inputFeature, id, statsMap, id_partner);
                            statsMap.clear();
                        }
                        
                    }
                    loopCounter++;
                    //int id = nextId(startId);
                    if(loopCounter % 100 == 0){
                        LOGGER.info("computed arcs FROM -" + (loopCounter-100) + "- TO -" + loopCounter + "-");
                    }
                    if(LOGGER.isDebugEnabled()){
                        LOGGER.debug("Computing arc " + inputFeature.getID());
                    }
                }
                importFinished(total, "Data imported in " + outFeatureName);

            } catch(Exception e){
                LOGGER.error(e.getMessage(), e);
            }
            finally {
                VulnerabilityUtils.disposeGTIFFReaders(targetReaders);
                closeInputReader();
            }
        }
    }

    private void logVulnerabilityConfiguration(Iterator rasterIter, List<Double> allDistances, Properties targetMapping, Properties zoneValues){
        StringBuilder sb = new StringBuilder();
        sb.append("rasterLoaded:[ ");
        while(rasterIter.hasNext()){
            sb.append((String)rasterIter.next()).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
        
        sb = new StringBuilder();
        sb.append("distanceLoaded:[ ");
        for(Double el : allDistances){
            sb.append(el).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
        
        sb = new StringBuilder();
        sb.append("tableVulnerabilityMapping:[ ");
        Iterator targetMappingIter = targetMapping.keySet().iterator();
        while(targetMappingIter.hasNext()){
            String key = (String)targetMappingIter.next();
            sb.append(key).append("-").append(targetMapping.getProperty(key)).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
        
        sb = new StringBuilder();
        sb.append("zoneValuesCopSuolo:[ ");
        Iterator zoneValuesIter = zoneValues.keySet().iterator();
        while(zoneValuesIter.hasNext()){
            String key = (String)zoneValuesIter.next();
            sb.append(key).append("-").append(zoneValues.getProperty(key)).append(", ");
        }
        sb.append("]");
        LOGGER.info(sb.toString());
    }
    
    private int writeOutputObjects(int trace, JDBCDataStore dataStore,
            OutputObject[] outputObjects, int total, int errors, String outputName,
            SimpleFeature inputFeature, String id, Map<String, Double> map, int partner_id) throws IOException {
        Transaction rowTransaction = new DefaultTransaction();
        setTransaction(outputObjects, rowTransaction);

        try {
            addVulnerabilityFeature(outputObjects[0], id, map, partner_id);
            rowTransaction.commit();

            updateImportProgress(total, "Importing data in " + outputName);
        } catch (Exception e) {
            errors++;
            rollbackId();
            rowTransaction.rollback();
        } finally {
            rowTransaction.close();
        }
        return errors;
    }

    private void addVulnerabilityFeature(OutputObject vulnerabilityObject, String id, Map<String, Double> map, int partner_id)
            throws IOException {
        
//        Iterator iter = map.keySet().iterator();
//        while(iter.hasNext()){
//            LOGGER.info((String)iter.next());
//        }
        SimpleFeatureBuilder featureBuilder = vulnerabilityObject.getBuilder();
        String[] p_key = id.split("\\.");
        for (AttributeDescriptor attr : vulnerabilityObject.getSchema().getAttributeDescriptors()) {
            if (attr.getLocalName().equals("id_geo_arco")) {
                featureBuilder.add(p_key[0]);
            } else if (attr.getLocalName().equals("id_distanza")) {
                featureBuilder.add(p_key[1]);
            } else if (attr.getLocalName().equals(PARTNER_FIELD)) {
                featureBuilder.add(partner_id+"");
            } else { 
                Double value = map.get(attr.getLocalName());
                featureBuilder.add((value == null)?DISTANCE_NOT_SET_VALUE:value);
            }
        }
        SimpleFeature feature = featureBuilder.buildFeature(id);
        feature.getUserData().put(Hints.USE_PROVIDED_FID, true);
        vulnerabilityObject.getWriter().addFeatures(DataUtilities.collection(feature));
    }
    
    private static String buildFid(String idArco, Double el){
        return idArco + "." +el.intValue();
    }
    
    private Filter buildOriginFilter(int idPartner) {
        if (this.startOriginId != null && this.endOriginId != null) {
            return filterFactory.and(
                    filterFactory.equals(filterFactory.property(PARTNER_FIELD),
                            filterFactory.literal(idPartner)),
                    filterFactory.between(filterFactory.property(GEOID),
                            filterFactory.literal(this.startOriginId),
                            filterFactory.literal(this.endOriginId)));
        }
        return filterFactory.equals(filterFactory.property(PARTNER_FIELD),
                filterFactory.literal(idPartner));
    }
}
