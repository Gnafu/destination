/*
 *    GeoTools - The Open Source Java GIS Toolkit
 *    http://geotools.org
 * 
 *    (C) 2005-2008, Open Source Geospatial Foundation (OSGeo)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotools.process.raster.gs;

import it.geosolutions.jaiext.algebra.AlgebraDescriptor.Operator;
import it.geosolutions.jaiext.range.Range;

import java.util.List;

import org.geotools.coverage.grid.GridCoverage2D;
import org.geotools.coverage.processing.CoverageProcessor;
import org.geotools.factory.Hints;
import org.geotools.process.ProcessException;
import org.geotools.process.factory.DescribeParameter;
import org.geotools.process.factory.DescribeProcess;
import org.geotools.process.factory.DescribeResult;
import org.geotools.referencing.CRS;
import org.geotools.resources.i18n.ErrorKeys;
import org.geotools.resources.i18n.Errors;
import org.opengis.coverage.grid.GridEnvelope;
import org.opengis.coverage.processing.Operation;
import org.opengis.geometry.Envelope;
import org.opengis.parameter.ParameterValueGroup;
import org.opengis.referencing.FactoryException;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.opengis.referencing.operation.MathTransform;

import com.vividsolutions.jts.geom.Geometry;

@DescribeProcess(title = "Process Coverages", description = "Returns a raster generated by pixel-by-pixel algebric operation of N source rasters.  Source rasters must have the same bounding box and resolution.")
public class AlgebricCoverageProcess{

    private static final CoverageProcessor PROCESSOR = CoverageProcessor.getInstance();

    private static final Operation ALGEBRIC_OP = PROCESSOR.getOperation("algebric");
    
    private static final String MISMATCHING_ENVELOPE_MESSAGE = "coverages should share the same Envelope";
    
    private static final String MISMATCHING_GRID_MESSAGE = "coverages should have the same gridRange";
    
    private static final String MISMATCHING_CRS_MESSAGE = "coverages should share the same CoordinateReferenceSystem";
    
    private static final String MISMATCHING_DATA_TYPE_MESSAGE = "coverages should have the same data type";

    public static void checkCompatibleCoverages(List<GridCoverage2D> coverages) throws ProcessException {
        
        int numSources = coverages.size();
        String coveragesNull;
        // 
        // checking null coverages
        // 
        for(int i = 0; i < numSources; i++){
            GridCoverage2D coverage = coverages.get(i);
            if (coverage == null){
                coveragesNull = "coverage "+i;  
                throw new ProcessException(Errors.format(ErrorKeys.NULL_ARGUMENT_$1, coveragesNull));
            }
        }
        
        GridCoverage2D coverage0 = coverages.get(0);
        
        CoordinateReferenceSystem crs0 = coverage0.getCoordinateReferenceSystem();
        CoordinateReferenceSystem crs;
        
        Envelope env0 = coverage0.getEnvelope();
        Envelope env;
        
        GridEnvelope gridRange0 = coverage0.getGridGeometry().getGridRange();
        GridEnvelope gridRange;
        
        int dataType0 = coverage0.getRenderedImage().getSampleModel().getDataType();
        int dataType;
        
        for(int i = 1; i < numSources; i++){
            GridCoverage2D coverage = coverages.get(i);  
            
            // 
            // checking same CRS
            // 
            crs = coverage.getCoordinateReferenceSystem();
            
            if (!CRS.equalsIgnoreMetadata(crs0, crs)){
                MathTransform mathTransform = null;
                try {
                    mathTransform = CRS.findMathTransform(crs0, crs);
                } catch (FactoryException e) {
                    throw new ProcessException("Exceptions occurred while looking for a mathTransform between the coverage's CRSs", e );
                }
                if (mathTransform != null && !mathTransform.isIdentity()){
                    throw new ProcessException(MISMATCHING_CRS_MESSAGE);
                }
            }
            
            // 
            // checking same Envelope and grid range
            // 

            env = coverage.getEnvelope();
            if (!env0.equals(env)) {
                throw new ProcessException(MISMATCHING_ENVELOPE_MESSAGE);
            }
            

            gridRange = coverage.getGridGeometry().getGridRange();
            if (gridRange0.getSpan(0) != gridRange.getSpan(0)
                    || gridRange0.getSpan(1) != gridRange.getSpan(1)) {
                throw new ProcessException(MISMATCHING_GRID_MESSAGE);
            }        
            
            // 
            // checking same data type
            //
            dataType = coverage.getRenderedImage().getSampleModel().getDataType();
            if(dataType !=dataType0){
                throw new ProcessException(MISMATCHING_DATA_TYPE_MESSAGE);
            } 
        }
    } 
    
    @DescribeResult(name = "result", description = "Calculated Raster")
    public GridCoverage2D execute(
            @DescribeParameter(name = "coverages", description = "Input rasters", min = 2) List<GridCoverage2D> coverages,
            @DescribeParameter(name = "operation", description = "Operator to use for the algebric operation") Operator algebricOp,
            @DescribeParameter(name = "roi", description = "Optional roi to use for calculations") Geometry roi,
            @DescribeParameter(name = "noData", description = "Optional No Data Range to use for calculations") Range noData,
            @DescribeParameter(name = "destinationNoData", description = "Optional output value for No Data to use for calculations") Double destinationNoData,
            @DescribeParameter(name = "hints", description = "Optional hints used for calculations")Hints hints
                    )throws ProcessException {

        // //
        //
        // Initialization: compatibility checks
        //
        // //
        checkCompatibleCoverages(coverages);

        // //
        //
        // Settings of the sources
        //
        // //
        final ParameterValueGroup param = ALGEBRIC_OP.getParameters();

        param.parameter("sources").setValue(coverages);
         
        // //
        //
        // Settings of the parameters
        //
        // //
        param.parameter("operation").setValue(algebricOp);
        param.parameter("noData").setValue(noData);      
        param.parameter("destinationNoData").setValue(destinationNoData);
        param.parameter("roi").setValue(roi);
        
        // //
        //
        // Doing the Operation
        //
        // //
        return (GridCoverage2D) PROCESSOR.doOperation(param,hints);
    }

}
